/**
 * Point d'entr√©e du serveur
 * @module Server
 */

const app = require("./app");
const database = require('./config/database');
const initializeDatabase = require("./utils/initializeDatabase");
const logger = require("./utils/logger");

// Configuration
const PORT = process.env.PORT || 3000;
const ENV = process.env.NODE_ENV || 'development';

/**
 * Initialise la base de donn√©es
 * @async
 * @returns {Promise<void>}
 */
async function initDatabase() {
    await database.authenticate();
    logger.info("‚úÖ Connexion √† la BDD r√©ussie");

    await database.sync({ force: process.env.RESET_DB === 'true' });
    logger.info("üì¶ Mod√®les synchronis√©s");

    await initializeDatabase();
    logger.info("üîß Donn√©es initiales charg√©es");
}

/**
 * D√©marre le serveur
 * @async
 * @returns {Promise<void>}
 */
async function startServer() {
    try {
        await initDatabase();

        app.listen(PORT, () => {
            logger.info(`üöÄ Serveur ${ENV} lanc√© sur http://localhost:${PORT}`);
        });
    } catch (error) {
        logger.error("‚ùå Erreur lors du d√©marrage :", error);
        process.exit(1);
    }
}

// Gestion des erreurs non captur√©es
process.on('unhandledRejection', (reason, promise) => {
    logger.error('Promesse non g√©r√©e rejet√©e:', reason);
    // Application des proc√©dures de nettoyage
    process.exit(1);
});

process.on('uncaughtException', (error) => {
    logger.error('Exception non captur√©e:', error);
    // Application des proc√©dures de nettoyage
    process.exit(1);
});

// D√©marrage du serveur
startServer();
